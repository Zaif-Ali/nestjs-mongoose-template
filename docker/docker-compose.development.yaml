services:
  redis-app:
    container_name: redis-app
    image: redis:alpine
    command:
      [
        'redis-server',
        '--requirepass',
        '${REDIS_PASSWORD}',
        '--appendonly',
        'yes',
      ]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 512MB

  mongodb:
    image: mongo
    container_name: mongo
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DB_NAME}
    ports:
      - '${MONGO_PORT}:27017'
    volumes:
      - mongo-data:/data/db # Data Directory
      - ${MONGO_LOG_DIR}:/var/log/mongodb # Log Directory
      - ${MONGO_BACKUP_DIR}:/mongodb-backups # Daily Backup Directory
    restart: always
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'mongosh',
          '--username',
          '${MONGODB_USER}',
          '--password',
          '${MONGODB_PASSWORD}',
          '--authenticationDatabase',
          'admin',
          '--eval',
          "db.adminCommand('ping').ok",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.5' # 2.5 CPUs per server
          memory: 2GB # 2GB RAM per server

  mongo-express:
    image: mongo-express
    container_name: mongo-express-app
    restart: always
    ports:
      - '${MONGO_EXPRESS_PORT}:8081'
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGODB_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGODB_PASSWORD}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_MONGODB_PORT: ${MONGO_PORT}
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  mongo-data:
    driver: local
    name: mongo-data
